// Code generated by protoc-gen-go-errors. DO NOT EDIT.

package example

import (
	fmt "fmt"
	errors "github.com/go-kratos/kratos/v2/errors"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
const _ = errors.SupportPackageIsVersion1

func IsSuccess(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_Success.String() && e.Code == 200
}

func ErrorSuccess(format string, args ...interface{}) *errors.Error {
	return errors.New(200, ErrorReason_Success.String(), fmt.Sprintf(format, args...))
}

func IsInvalidParameters(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_InvalidParameters.String() && e.Code == 200
}

func ErrorInvalidParameters(format string, args ...interface{}) *errors.Error {
	return errors.New(200, ErrorReason_InvalidParameters.String(), fmt.Sprintf(format, args...))
}

func IsNotAuthorized(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_NotAuthorized.String() && e.Code == 200
}

func ErrorNotAuthorized(format string, args ...interface{}) *errors.Error {
	return errors.New(200, ErrorReason_NotAuthorized.String(), fmt.Sprintf(format, args...))
}

func IsTooManyRequests(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_TooManyRequests.String() && e.Code == 200
}

func ErrorTooManyRequests(format string, args ...interface{}) *errors.Error {
	return errors.New(200, ErrorReason_TooManyRequests.String(), fmt.Sprintf(format, args...))
}

func IsServerInternalError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_ServerInternalError.String() && e.Code == 200
}

func ErrorServerInternalError(format string, args ...interface{}) *errors.Error {
	return errors.New(200, ErrorReason_ServerInternalError.String(), fmt.Sprintf(format, args...))
}
