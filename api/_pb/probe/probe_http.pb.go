// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.0
// - protoc             v3.21.12
// source: probe/probe.proto

package probe

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	structpb "google.golang.org/protobuf/types/known/structpb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationProbehealthy = "/probe.Probe/healthy"
const OperationProbeready = "/probe.Probe/ready"

type ProbeHTTPServer interface {
	// Healthy for liveness probe
	Healthy(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	// Ready for readiness probe
	// 这里示范使用 google.protobuf.Struct 从gin这样的web框架迁移代码直接重用原来的接口struct定义
	// 避免从go struct到pb message的转换。
	// 不过，还是建议使用pb来定义接口, 这样接口更易于维护
	Ready(context.Context, *structpb.Struct) (*ReadinessProbeResponse, error)
}

func RegisterProbeHTTPServer(s *http.Server, srv ProbeHTTPServer) {
	r := s.Route("/")
	r.GET("/healthy", _Probe_Healthy0_HTTP_Handler(srv))
	r.GET("/are/you/ready", _Probe_Ready0_HTTP_Handler(srv))
}

func _Probe_Healthy0_HTTP_Handler(srv ProbeHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in emptypb.Empty
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationProbehealthy)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Healthy(ctx, req.(*emptypb.Empty))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Probe_Ready0_HTTP_Handler(srv ProbeHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in structpb.Struct
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationProbeready)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Ready(ctx, req.(*structpb.Struct))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ReadinessProbeResponse)
		return ctx.Result(200, reply)
	}
}

type ProbeHTTPClient interface {
	Healthy(ctx context.Context, req *emptypb.Empty, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	Ready(ctx context.Context, req *structpb.Struct, opts ...http.CallOption) (rsp *ReadinessProbeResponse, err error)
}

type ProbeHTTPClientImpl struct {
	cc *http.Client
}

func NewProbeHTTPClient(client *http.Client) ProbeHTTPClient {
	return &ProbeHTTPClientImpl{client}
}

func (c *ProbeHTTPClientImpl) Healthy(ctx context.Context, in *emptypb.Empty, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/healthy"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationProbehealthy))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ProbeHTTPClientImpl) Ready(ctx context.Context, in *structpb.Struct, opts ...http.CallOption) (*ReadinessProbeResponse, error) {
	var out ReadinessProbeResponse
	pattern := "/are/you/ready"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationProbeready))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
