// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: probe/probe.proto

package probe

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	structpb "google.golang.org/protobuf/types/known/structpb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Probe_Healthy_FullMethodName = "/probe.Probe/healthy"
	Probe_Ready_FullMethodName   = "/probe.Probe/ready"
)

// ProbeClient is the client API for Probe service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProbeClient interface {
	// for liveness probe
	Healthy(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// for readiness probe
	// 这里示范使用 google.protobuf.Struct 从gin这样的web框架迁移代码直接重用原来的接口struct定义
	// 避免从go struct到pb message的转换。
	// 不过，还是建议使用pb来定义接口, 这样接口更易于维护
	Ready(ctx context.Context, in *structpb.Struct, opts ...grpc.CallOption) (*ReadinessProbeResponse, error)
}

type probeClient struct {
	cc grpc.ClientConnInterface
}

func NewProbeClient(cc grpc.ClientConnInterface) ProbeClient {
	return &probeClient{cc}
}

func (c *probeClient) Healthy(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Probe_Healthy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *probeClient) Ready(ctx context.Context, in *structpb.Struct, opts ...grpc.CallOption) (*ReadinessProbeResponse, error) {
	out := new(ReadinessProbeResponse)
	err := c.cc.Invoke(ctx, Probe_Ready_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProbeServer is the server API for Probe service.
// All implementations must embed UnimplementedProbeServer
// for forward compatibility
type ProbeServer interface {
	// for liveness probe
	Healthy(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	// for readiness probe
	// 这里示范使用 google.protobuf.Struct 从gin这样的web框架迁移代码直接重用原来的接口struct定义
	// 避免从go struct到pb message的转换。
	// 不过，还是建议使用pb来定义接口, 这样接口更易于维护
	Ready(context.Context, *structpb.Struct) (*ReadinessProbeResponse, error)
	mustEmbedUnimplementedProbeServer()
}

// UnimplementedProbeServer must be embedded to have forward compatible implementations.
type UnimplementedProbeServer struct {
}

func (UnimplementedProbeServer) Healthy(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Healthy not implemented")
}
func (UnimplementedProbeServer) Ready(context.Context, *structpb.Struct) (*ReadinessProbeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ready not implemented")
}
func (UnimplementedProbeServer) mustEmbedUnimplementedProbeServer() {}

// UnsafeProbeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProbeServer will
// result in compilation errors.
type UnsafeProbeServer interface {
	mustEmbedUnimplementedProbeServer()
}

func RegisterProbeServer(s grpc.ServiceRegistrar, srv ProbeServer) {
	s.RegisterService(&Probe_ServiceDesc, srv)
}

func _Probe_Healthy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProbeServer).Healthy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Probe_Healthy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProbeServer).Healthy(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Probe_Ready_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(structpb.Struct)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProbeServer).Ready(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Probe_Ready_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProbeServer).Ready(ctx, req.(*structpb.Struct))
	}
	return interceptor(ctx, in, info, handler)
}

// Probe_ServiceDesc is the grpc.ServiceDesc for Probe service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Probe_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "probe.Probe",
	HandlerType: (*ProbeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "healthy",
			Handler:    _Probe_Healthy_Handler,
		},
		{
			MethodName: "ready",
			Handler:    _Probe_Ready_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "probe/probe.proto",
}
